name: Run Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  flutter-tests:
    name: Flutter Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      - name: Cache Flutter dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            emailinator_flutter/.dart_tool
          key: flutter-${{ runner.os }}-${{ hashFiles('emailinator_flutter/pubspec.lock') }}
          restore-keys: |
            flutter-${{ runner.os }}-

      - name: Install Flutter dependencies
        working-directory: ./emailinator_flutter
        run: flutter pub get

      - name: Analyze Flutter code
        working-directory: ./emailinator_flutter
        run: flutter analyze

      - name: Check Flutter formatting
        working-directory: ./emailinator_flutter
        run: dart format --set-exit-if-changed .

      - name: Run Flutter tests
        working-directory: ./emailinator_flutter
        run: flutter test --coverage

      - name: Upload Flutter coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./emailinator_flutter/coverage/lcov.info
          flags: flutter
          name: flutter-coverage
          fail_ci_if_error: false

  supabase-tests:
    name: Supabase Edge Function Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - name: Install npm dependencies
        run: npm ci

      - name: Install Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Start Supabase local development
        working-directory: ./supabase
        run: |
          supabase start --exclude gotrue,realtime,storage-api,imgproxy,edge-runtime
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

      - name: Run Supabase function tests
        run: |
          # Test using npm scripts
          echo "Testing inbound-email function..."
          npm run test:inbound-email
          
          echo "Testing deposit-budget function..."
          npm run test:deposit-budget
          
          echo "Testing reprocess-unprocessed function..."
          npm run test:reprocess-unprocessed
          
          # Also test filter_test.ts with Deno directly
          echo "Testing inbound-email filter..."
          deno test --allow-all supabase/functions/inbound-email/filter_test.ts

      - name: Stop Supabase
        working-directory: ./supabase
        run: supabase stop
        if: always()

  python-tests:
    name: Python Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: |
            .venv
            ~/.cache/pip
          key: python-${{ runner.os }}-${{ hashFiles('requirements.txt', 'pyproject.toml') }}
          restore-keys: |
            python-${{ runner.os }}-

      - name: Create virtual environment
        run: python -m venv .venv

      - name: Install Python dependencies
        run: |
          source .venv/bin/activate
          pip install --upgrade pip setuptools wheel
          pip install -e .
          pip install -r requirements.txt

      - name: Run Python tests (if any exist)
        run: |
          source .venv/bin/activate
          if [ -d "tests" ] && [ "$(find tests -name '*.py' | head -1)" ]; then
            echo "Running Python tests..."
            pytest -s
          else
            echo "No Python tests found, skipping..."
          fi

  # Combined job that depends on all test jobs
  all-tests:
    name: All Tests Passed
    runs-on: ubuntu-latest
    needs: [flutter-tests, supabase-tests, python-tests]
    if: always()
    
    steps:
      - name: Check test results
        run: |
          if [[ "${{ needs.flutter-tests.result }}" == "failure" || 
                "${{ needs.supabase-tests.result }}" == "failure" || 
                "${{ needs.python-tests.result }}" == "failure" ]]; then
            echo "One or more test jobs failed"
            exit 1
          else
            echo "All tests passed successfully!"
          fi
